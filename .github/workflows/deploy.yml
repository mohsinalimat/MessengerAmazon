name: Deploy Related:Chat
on: workflow_dispatch

jobs:
  setup_aws_infrastructure:
    name: Setup Related:Chat AWS infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cdk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('cdk/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install npm packages
        run: npm install --production=false --silent

      - name: Build
        run: npm run cdk bootstrap && npm run deploy

  build_and_deploy_production_backend:
    needs: setup_aws_infrastructure
    name: Build and deploy production backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cloud
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: relatedchat-api
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: serverless deploy
        run: |
          npm i -g serverless serverless-dotenv-plugin --silent
          export SLS_WARNING_DISABLE='*'
          export SLS_DEPRECATION_DISABLE='*'
          echo "KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
          echo "KEY_SECRET=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "IMAGE=${{ steps.build-image.outputs.image }}" >> .env
          sls deploy

  build_and_deploy_production_webapp:
    needs: build_and_deploy_production_backend
    name: Build and deploy production web app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get AWS CloudFormation stacks outputs
        run: |
          aws cloudformation describe-stacks --stack-name RelatedChatAppStack > mainStack.json
          aws cloudformation describe-stacks --stack-name RelatedChatLambdaStack > lambdaStack.json
          node makeEnv.js
          echo 'cfsecrets<<EOF' >> $GITHUB_ENV
          echo $(cat ./cfsecrets.json) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build
        run: npm ci && npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Create deployment
        run: |
          aws amplify create-deployment --app-id ${{ fromJSON(env.cfsecrets).AmplifyAppId }} --branch-name prod > deployment.json
          echo 'deployment_infos<<EOF' >> $GITHUB_ENV
          echo $(cat ./deployment.json) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Upload build folder and start deployment
        run: |
          cd build
          zip -r build.zip .
          curl -X PUT -T build.zip -L "${{ fromJSON(env.deployment_infos).zipUploadUrl }}"
          aws amplify start-deployment --app-id ${{ fromJSON(env.cfsecrets).AmplifyAppId }} --branch-name prod --job-id ${{ fromJSON(env.deployment_infos).jobId }} > deployment_result.json
